{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the location for all resources."
      }
    },
    "tsiStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Storage account name for Tim Series Insights."
      }
    },
    "tsiEnvironmentName": {
      "type": "string",
      "metadata": {
        "description": "Name for the Time Series Insights environment"
      }
    },
    "tsiEnvironmentSku": {
      "type": "string",
      "defaultValue": "L1",
      "allowedValues": [
        "L1"
      ],
      "metadata": {
        "description": "The name of the sku. For more information, see https://azure.microsoft.com/pricing/details/time-series-insights/"
      }
    },
    "tsiEnvironmentKind": {
      "type": "string",
      "defaultValue": "LongTerm",
      "allowedValues": [
        "LongTerm"
      ],
      "metadata": {
        "description": "The Time Series Environment kind."
      }
    },
    "tsiEnvironmentSkuCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 10,
      "metadata": {
        "description": "The unit capacity of the Sku. For more information, see https://azure.microsoft.com/pricing/details/time-series-insights/"
      }
    },
    "tsiEnvironmentTimeSeriesIdProperties": {
      "type": "array",
      "maxLength": 3,
      "metadata": {
        "description": "Time Series ID acts as a partition key for your data and as a primary key for your time series model. It is important that you specify the appropriate Time Series Property ID during environment creation, since you can't change it later. Note that the Property ID is case sensitive. You can use 1-3 keys: one is required, but up to three can be used to create a composite."
      }
    },
    "tsiTimestampPropertyName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 90,
      "metadata": {
        "description": "The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used."
      }
    },
    "tsiAccessPolicyObjectId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Object id of the user or application in AAD that should have Contributor access to the environment. The service principal objectId can be obtained by calling the Get-AzureRMADUser or the Get-AzureRMADServicePrincipal cmdlets. Creating an access policy for AAD groups is not yet supported."
      }
    },
    "tsiAccessPolicyRoles": {
      "type": "array",
      "defaultValue": [ "Contributor" ],
      "metadata": {
        "description": "A list of the access roles assigned to the object Id specified in the parameter tsiAccessPolicyObjectId"
      }
    },
    "tsiStorageAccountKind": {
      "type": "string",
      "defaultValue": "StorageV2",
      "allowedValues": [
        "BlobStorage",
        "BlockBlobStorage",
        "FileStorage",
        "Storage",
        "StorageV2"
      ],
      "metadata": {
        "description": "Storage account kind for warm up storage"
      }
    },
    "tsiStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Storage Account type for L1 TSI environments."
      }
    },
    "tsiStorageisHnsEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether the storage account for warm up storage has HNS enabled"
      }
    },
    "tsiWarmStoreDataRetention": {
      "type": "string",
      "defaultValue": "P7D",
      "metadata": {
        "description": "ISO duration between 7 and 31 days. Remove the 'warmStoreConfiguration' property from the envrionment to delete the warm store."
      }
    },
    "eventSource1Kind": {
      "type": "string",
      "defaultValue": "Microsoft.EventHub",
      "allowedValues": [
        "Microsoft.EventHub",
        "Microsoft.IoTHub"
      ],
      "metadata": {
        "description": "Kind for event source 1."
      }
    },
    "eventSource1Name": {
      "type": "string",
      "metadata": {
        "description": "Name for event source 1."
      }
    },
    "eventSource1ResourceId": {
      "type": "string",
      "metadata": {
        "description": "Resource Id for event source 1."
      }
    },
    "eventSource1Namespace": {
      "type": "string",
      "metadata": {
        "description": "Namespace for event source 1."
      }
    },
    "eventSource1HubName": {
      "type": "string",
      "metadata": {
        "description": "Event hub name for event source 1."
      }
    },
    "eventSource1KeyName": {
      "type": "string",
      "metadata": {
        "description": "Key name for event source 1."
      }
    },
    "eventSource1AccessKey": {
      "type": "securestring",
      "metadata": {
        "description": "Access key for event source 1."
      }
    },
    "eventSource1ConsumerGroup": {
      "type": "string",
      "metadata": {
        "description": "Consumer group for event source 1."
      }
    },
    "eventSource2Kind": {
      "type": "string",
      "defaultValue": "Microsoft.EventHub",
      "allowedValues": [
        "Microsoft.EventHub",
        "Microsoft.IoTHub"
      ],
      "metadata": {
        "description": "Kind for event source 2."
      }
    },
    "eventSource2Name": {
      "type": "string",
      "metadata": {
        "description": "Name for event source 2."
      }
    },
    "eventSource2ResourceId": {
      "type": "string",
      "metadata": {
        "description": "Resource Id for event source 2."
      }
    },
    "eventSource2Namespace": {
      "type": "string",
      "metadata": {
        "description": "Namespace for event source 2."
      }
    },
    "eventSource2HubName": {
      "type": "string",
      "metadata": {
        "description": "Event hub name for event source 2."
      }
    },
    "eventSource2KeyName": {
      "type": "string",
      "metadata": {
        "description": "Key name for event source 2."
      }
    },
    "eventSource2AccessKey": {
      "type": "securestring",
      "metadata": {
        "description": "Access key for event source 2."
      }
    },
    "eventSource2ConsumerGroup": {
      "type": "string",
      "metadata": {
        "description": "Consumer group for event source 2."
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "comments": "Time Series Insights storage account",
      "apiVersion": "2018-02-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('tsiStorageAccountName')]",
      "kind": "[parameters('tsiStorageAccountKind')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('tsiStorageAccountType')]"
      },
      "properties": {
        "isHnsEnabled": "[parameters('tsiStorageisHnsEnabled')]"
      }
    },
    {
      "comments": "Time Series Insights environment",
      "apiVersion": "2020-05-15",
      "type": "Microsoft.TimeSeriesInsights/environments",
      "name": "[parameters('tsiEnvironmentName')]",
      "kind": "[parameters('tsiEnvironmentKind')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('tsiEnvironmentSku')]",
        "capacity": "[parameters('tsiEnvironmentSkuCapacity')]"
      },
      "properties": {
        "storageConfiguration": {
          "accountName": "[parameters('tsiStorageAccountName')]",
          "managementKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('tsiStorageAccountName')), '2018-02-01').keys[0].value]"
        },
        "timeSeriesIdProperties": "[parameters('tsiEnvironmentTimeSeriesIdProperties')]",
        "warmStoreConfiguration": {
          "dataRetention": "[parameters('tsiWarmStoreDataRetention')]"
        }
      },
      "resources": [
        {
          "apiVersion": "2020-05-15",
          "type": "Microsoft.TimeSeriesInsights/environments/accesspolicies",
          "name": "[concat(parameters('tsiEnvironmentName'), '/', 'ownerAccessPolicyName')]",
          "condition": "[not(empty(parameters('tsiAccessPolicyObjectId')))]",
          "properties": {
            "principalObjectId": "[parameters('tsiAccessPolicyObjectId')]",
            "roles": "[parameters('tsiAccessPolicyRoles')]"
          },
          "dependsOn": [
            "[concat('Microsoft.TimeSeriesInsights/environments/', parameters('tsiEnvironmentName'))]"
          ]
        },
        {
          "apiVersion": "2020-05-15",
          "type": "eventsources",
          "kind": "[parameters('eventSource1Kind')]",
          "name": "[parameters('eventSource1Name')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.TimeSeriesInsights/environments/', parameters('tsiEnvironmentName'))]"
          ],
          "properties": {
            "eventSourceResourceId": "[parameters('eventSource1ResourceId')]",
            "serviceBusNamespace": "[parameters('eventSource1Namespace')]",
            "eventHubName": "[parameters('eventSource1HubName')]",
            "keyName": "[parameters('eventSource1KeyName')]",
            "consumerGroupName": "[parameters('eventSource1ConsumerGroup')]",
            "sharedAccessKey": "[parameters('eventSource1AccessKey')]",
            "timestampPropertyName": "[parameters('tsiTimestampPropertyName')]"
          }
        },
        {
          "apiVersion": "2020-05-15",
          "type": "eventsources",
          "kind": "[parameters('eventSource2Kind')]",
          "name": "[parameters('eventSource2Name')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.TimeSeriesInsights/environments/', parameters('tsiEnvironmentName'))]"
          ],
          "properties": {
            "eventSourceResourceId": "[parameters('eventSource2ResourceId')]",
            "serviceBusNamespace": "[parameters('eventSource2Namespace')]",
            "eventHubName": "[parameters('eventSource2HubName')]",
            "keyName": "[parameters('eventSource2KeyName')]",
            "consumerGroupName": "[parameters('eventSource2ConsumerGroup')]",
            "sharedAccessKey": "[parameters('eventSource2AccessKey')]",
            "timestampPropertyName": "[parameters('tsiTimestampPropertyName')]"
          }
        }
      ],
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('tsiStorageAccountName'))]"
      ]
    }
  ],
  "outputs": {
    "tsiDataAccessFQDN": {
      "value": "[reference(resourceId('Microsoft.TimeSeriesInsights/environments', parameters('tsiEnvironmentName'))).dataAccessFQDN]",
      "type": "string"
    }
  }
}