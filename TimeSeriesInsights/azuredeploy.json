{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "eventSourceResourceName": {
      "type": "string",
      "metadata": {
        "description": "The name of the event source resouce."
      }
    },
    "eventSourceResourceId": {
      "type": "string",
      "metadata": {
        "description": "Event source resource id"
      }
    },
    "eventSourceConsumerGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the consumer group that the Time Series Insights service will use to read the data from the event hub. NOTE: To avoid resource contention, this consumer group must be dedicated to the Time Series Insights service and not shared with other readers."
      }
    },
    "eventSourcePolicyName": {
      "type": "string",
      "defaultValue": "service",
      "metadata": {
        "description": "The name of the shared access key that the Time Series Insights service will use to connect to the IoT hub."
      }
    },
    "eventSourceSharedAccessKey": {
      "type": "secureString",
      "metadata": {
        "description": "The shared access key for the event source IoT hub."
      }
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "tsiquickstart",
      "maxLength": 90,
      "metadata": {
        "description": "Name of the environment. The name cannot include:   '<', '>', '%', '&', ':', '\\', '?', '/' and any control characters. All other characters are allowed."
      }
    },
    "environmentSkuName": {
      "type": "string",
      "defaultValue": "L1",
      "allowedValues": [
        "L1"
      ],
      "metadata": {
        "description": "The name of the sku. For more information, see https://azure.microsoft.com/pricing/details/time-series-insights/"
      }
    },
    "environmentKind": {
      "type": "string",
      "defaultValue": "LongTerm",
      "allowedValues": [
        "LongTerm"
      ],
      "metadata": {
        "description": "The Time Series Environment kind."
      }
    },
    "environmentSkuCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 10,
      "metadata": {
        "description": "The unit capacity of the Sku. For more information, see https://azure.microsoft.com/pricing/details/time-series-insights/"
      }
    },
    "environmentTimeSeriesIdProperties": {
      "type": "array",
      "maxLength": 3,
      "metadata": {
        "description": "Time Series ID acts as a partition key for your data and as a primary key for your time series model. It is important that you specify the appropriate Time Series Property ID during environment creation, since you can't change it later. Note that the Property ID is case sensitive. You can use 1-3 keys: one is required, but up to three can be used to create a composite."
      }
    },
    "eventSourceName": {
      "type": "string",
      "defaultValue": "IoTHub",
      "maxLength": 90,
      "metadata": {
        "description": "Name of the event source child resource. The name cannot include:   '<', '>', '%', '&', ':', '\\', '?', '/' and any control characters. All other characters are allowed."
      }
    },
    "eventSourceTimestampPropertyName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 90,
      "metadata": {
        "description": "The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used."
      }
    },
    "accessPolicyObjectId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Object id of the user or application in AAD that should have Contributor access to the environment. The service principal objectId can be obtained by calling the Get-AzureRMADUser or the Get-AzureRMADServicePrincipal cmdlets. Creating an access policy for AAD groups is not yet supported."
      }
    },
    "accessPolicyRoles": {
      "type": "array",
      "defaultValue": [ "Contributor" ],
      "metadata": {
        "description": "A list of the access roles assigned to the object Id specified in the parameter accessPolicyObjectId"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Storage account name for warm up storage"
      }
    },
    "storageAccountKind": {
      "type": "string",
      "defaultValue": "StorageV2",
      "allowedValues": [
        "BlobStorage",
        "BlockBlobStorage",
        "FileStorage",
        "Storage",
        "StorageV2"
      ],
      "metadata": {
        "description": "Storage account kind for warm up storage"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Storage Account type for L1 TSI environments."
      }
    },
    "storageisHnsEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether the storage account for warm up storage has HNS enabled"
      }
    },
    "warmStoreDataRetention": {
      "type": "string",
      "defaultValue": "P7D",
      "metadata": {
        "description": "ISO duration between 7 and 31 days. Remove the 'warmStoreConfiguration' property from the envrionment to delete the warm store."
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "apiVersion": "2018-02-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageAccountName')]",
      "kind": "[parameters('storageAccountKind')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "properties": {
        "isHnsEnabled": "[parameters('storageisHnsEnabled')]"
      }
    },
    {
      "apiVersion": "2020-05-15",
      "type": "Microsoft.TimeSeriesInsights/environments",
      "name": "[parameters('environmentName')]",
      "kind": "[parameters('environmentKind')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('environmentSkuName')]",
        "capacity": "[parameters('environmentSkuCapacity')]"
      },
      "properties": {
        "storageConfiguration": {
          "accountName": "[parameters('storageAccountName')]",
          "managementKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2018-02-01').keys[0].value]"
        },
        "timeSeriesIdProperties": "[parameters('environmentTimeSeriesIdProperties')]",
        "warmStoreConfiguration": {
          "dataRetention": "[parameters('warmStoreDataRetention')]"
        }
      },
      "resources": [
        {
          "condition": "[not(empty(parameters('accessPolicyObjectId')))]",
          "apiVersion": "2020-05-15",
          "name": "[concat(parameters('environmentName'), '/', 'ownerAccessPolicyName')]",
          "type": "Microsoft.TimeSeriesInsights/environments/accesspolicies",
          "properties": {
            "principalObjectId": "[parameters('accessPolicyObjectId')]",
            "roles": "[parameters('accessPolicyRoles')]"
          },
          "dependsOn": [
            "[concat('Microsoft.TimeSeriesInsights/environments/', parameters('environmentName'))]"
          ]
        },
        {
          "type": "eventsources",
          "kind": "Microsoft.IoTHub",
          "name": "[parameters('eventSourceName')]",
          "apiVersion": "2020-05-15",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.TimeSeriesInsights/environments/', parameters('environmentName'))]"
          ],
          "properties": {
            "eventSourceResourceId": "[parameters('eventSourceResourceId')]",
            "iotHubName": "[parameters('eventSourceResourceName')]",
            "keyName": "[parameters('eventSourcePolicyName')]",
            "consumerGroupName": "[parameters('eventSourceConsumerGroupName')]",
            "sharedAccessKey": "[parameters('eventSourceSharedAccessKey')]",
            "timestampPropertyName": "[parameters('eventSourceTimestampPropertyName')]"
          }
        }
      ],
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]"
      ]
    }
  ],
  "outputs": {
    "dataAccessFQDN": {
      "value": "[reference(resourceId('Microsoft.TimeSeriesInsights/environments', parameters('environmentName'))).dataAccessFQDN]",
      "type": "string"
    }
  }
}