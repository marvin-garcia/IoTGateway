{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the location for all resources."
      }
    },
    "simVmName": {
      "type": "string",
      "metadata": {
        "description": "Virtual machine name"
      }
    },
    "simVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "description"
      }
    },
    "simVmDnsName": {
      "type": "string",
      "metadata": {
        "description": "Public DNS name for the simulator virtual machine. Result will be in the format of '<simVmDnsName>.<location>.cloudapp.azure.com'."
      }
    },
    "edgeVmName": {
      "type": "string",
      "metadata": {
        "description": "IoT edge virtual machine name."
      }
    },
    "edgeVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "IoT edge virtual machine size."
      }
    },
    "edgeVmDnsName": {
      "type": "string",
      "metadata": {
        "description": "Public DNS name for the IoT edge virtual machine. Result will be in the format of '<edgeVmDnsName>.<location>.cloudapp.azure.com'."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Specifies a username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Specifies the username password for the Virtual Machine."
      }
    },
    "vnetName": {
      "type": "string",
      "metadata": {
        "description": "Virtual Network name."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Virtual Network address prefix."
      }
    },
    "simSubnetName": {
      "type": "string",
      "defaultValue": "opcsim",
      "metadata": {
        "description": "Virtual Network subnet name for the simulator virtual machine."
      }
    },
    "simSubnetAddressRange": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "Virtual Network subnet address range for the simulator virtual machine."
      }
    },
    "edgeSubnetName": {
      "type": "string",
      "defaultValue": "iotedge",
      "metadata": {
        "description": "Virtual Network subnet name for the IoT edge virtual machine."
      }
    },
    "edgeSubnetAddressRange": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "Virtual Network subnet address range for the IoT edge virtual machine."
      }
    },
    "iotHubName": {
      "type": "string",
      "defaultValue": "[concat('iothub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
      "metadata": {
        "description": "The name of Azure IoT Hub created as part of the deployment."
      }
    },
    "iotHubSku": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "F1",
        "S1",
        "S2",
        "S3"
      ],
      "metadata": {
        "description": "The Azure IoT Hub SKU to use."
      }
    },
    "iotHubCapacity": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The Azure IoT Hub SKU capacity to use."
      }
    },
    "iotHubTier": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Free",
        "Standard"
      ],
      "metadata": {
        "description": "The Azure IoT Hub tier to use."
      }
    },
    "iotHubPartitionCount": {
      "type": "int",
      "defaultValue": 4,
      "metadata": {
        "description": "The Azure IoT Hub default endpoint partition count."
      }
    },
    "iotHubRetentionInDays": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The Azure IoT Hub default message retention in days."
      }
    },
    "dpsName": {
      "type": "string",
      "defaultValue": "[concat('dps', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
      "metadata": {
        "description": "The name of the Azure Device Provisioning service created as part of this deployment."
      }
    },
    "dpsSku": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "S1"
      ],
      "metadata": {
        "description": "The Azure Device Provisioning service SKU to use."
      }
    },
    "dpsCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "The Azure Device Provisioning service capacity."
      }
    },
    "dpsLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location of Azure IoT Hub for Device Provisioning service."
      }
    },
    "datalakeName": {
      "type": "string",
      "defaultValue": "[concat('datalake', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
      "metadata": {
        "description": "The name of the Azure datalake account created as part of this deployment."
      }
    },
    "datalakeSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "The datalake SKU to use."
      }
    },
    "datalakeContainerName": {
      "type": "string",
      "defaultValue": "telemetry",
      "metadata": {
        "description": "The name of the Azure datalake container."
      }
    },
    "eventHubNamespaceName": {
      "type": "string",
      "metadata": {
        "description": "The name of the event hub namespace."
      }
    },
    "eventHubSkuTier": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Basic"
      ],
      "metadata": {
        "description": "The tier plan of the event hub namespace."
      }
    },
    "eventHubSkuCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 20,
      "metadata": {
        "description": "The event hubs throughput units."
      }
    },
    "eventHubAutoInflate": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Value that indicates whether AutoInflate is enabled for eventhub namespace."
      }
    },
    "eventHubMaxThroughput": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 20,
      "metadata": {
        "description": "Upper limit of throughput units when AutoInflate is enabled."
      }
    },
    "eventHubRetentionInDays": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 7,
      "metadata": {
        "description": "Number of days to retain the events for this Event Hub."
      }
    },
    "eventHubPartitionCount": {
      "type": "int",
      "defaultValue": 4,
      "minValue": 1,
      "maxValue": 32,
      "metadata": {
        "description": "Number of partitions created for the Event Hub."
      }
    },
    "tsiEnvironmentName": {
      "type": "string",
      "defaultValue": "tsiquickstart",
      "maxLength": 90,
      "metadata": {
        "description": "Name of the environment. The name cannot include:   '<', '>', '%', '&', ':', '\\', '?', '/' and any control characters. All other characters are allowed."
      }
    },
    "tsiEnvironmentSkuName": {
      "type": "string",
      "defaultValue": "L1",
      "allowedValues": [
        "L1"
      ],
      "metadata": {
        "description": "The name of the sku. For more information, see https://azure.microsoft.com/pricing/details/time-series-insights/"
      }
    },
    "tsiEnvironmentKind": {
      "type": "string",
      "defaultValue": "LongTerm",
      "allowedValues": [
        "LongTerm"
      ],
      "metadata": {
        "description": "The Time Series Environment kind."
      }
    },
    "tsiEnvironmentSkuCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 10,
      "metadata": {
        "description": "The unit capacity of the Sku. For more information, see https://azure.microsoft.com/pricing/details/time-series-insights/"
      }
    },
    "tsiEnvironmentTimeSeriesIdProperties": {
      "type": "array",
      "maxLength": 3,
      "metadata": {
        "description": "Time Series ID acts as a partition key for your data and as a primary key for your time series model. It is important that you specify the appropriate Time Series Property ID during environment creation, since you can't change it later. Note that the Property ID is case sensitive. You can use 1-3 keys: one is required, but up to three can be used to create a composite."
      }
    },
    "tsiTimestampPropertyName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 90,
      "metadata": {
        "description": "The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used."
      }
    },
    "tsiAccessPolicyObjectId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Object id of the user or application in AAD that should have Contributor access to the environment. The service principal objectId can be obtained by calling the Get-AzureRMADUser or the Get-AzureRMADServicePrincipal cmdlets. Creating an access policy for AAD groups is not yet supported."
      }
    },
    "tsiAccessPolicyRoles": {
      "type": "array",
      "defaultValue": [ "Contributor" ],
      "metadata": {
        "description": "A list of the access roles assigned to the object Id specified in the parameter tsiAccessPolicyObjectId"
      }
    },
    "tsiStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Storage account name for warm up storage"
      }
    },
    "tsiStorageAccountKind": {
      "type": "string",
      "defaultValue": "StorageV2",
      "allowedValues": [
        "BlobStorage",
        "BlockBlobStorage",
        "FileStorage",
        "Storage",
        "StorageV2"
      ],
      "metadata": {
        "description": "Storage account kind for warm up storage"
      }
    },
    "tsiStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Storage Account type for L1 TSI environments."
      }
    },
    "tsiStorageisHnsEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether the storage account for warm up storage has HNS enabled"
      }
    },
    "tsiWarmStoreDataRetention": {
      "type": "string",
      "defaultValue": "P7D",
      "metadata": {
        "description": "ISO duration between 7 and 31 days. Remove the 'warmStoreConfiguration' property from the envrionment to delete the warm store."
      }
    },
    "templateUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/marvin-garcia/IoTGateway",
      "metadata": {
        "description": "Template URL for the custom scripts."
      }
    },
    "branchName": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "Repository branch name for the custom scripts."
      }
    },
    "imagesNamespace": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Namespace for Microsoft Docker images."
      }
    },
    "imagesTag": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Namespace for Microsoft Docker images."
      }
    },
    "dockerServer": {
      "type": "string",
      "defaultValue": "mcr.microsoft.com",
      "metadata": {
        "description": "Docker Server Uri to pull Docker images from."
      }
    },
    "dockerUser": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Username to authenticate with Docker server."
      }
    },
    "dockerPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Password to authenticate with Docker server."
      }
    }
  },
  "variables": {
    "simPublicIPAddressName": "[concat(parameters('simVmName'), '-ip')]",
    "simNetworkInterfaceName": "[concat(parameters('simVmName'), '-nic')]",
    "simNetworkSecurityGroupName": "[concat(parameters('simVmName'), '-nsg')]",
    "edgePublicIPAddressName": "[concat(parameters('edgeVmName'), '-ip')]",
    "edgeNetworkInterfaceName": "[concat(parameters('edgeVmName'), '-nic')]",
    "edgeNetworkSecurityGroupName": "[concat(parameters('edgeVmName'), '-nsg')]",
    "industrialIoTTemplateUrl": "https://raw.githubusercontent.com/Azure/Industrial-IoT",
    "industrialIoTBranchName": "master",
    "industrialIoTSimulationProfile": "default",
    "iotHubStorageEndpointName": "persistentstorage",
    "asaConsumerGroupName": "streamanalytics",
    "dpsResourceId": "[resourceId('Microsoft.Devices/provisioningServices', parameters('dpsName'))]",
    "eventHubListenPolicyName": "listen",
    "eventHubListenRuleId": "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', parameters('eventHubNamespaceName'), variables('eventHubListenPolicyName'))]",
    "eventHubSendPolicyName": "send",
    "eventHubSendRuleId": "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', parameters('eventHubNamespaceName'), variables('eventHubSendPolicyName'))]",
    "eventHubTelemetryName": "telemetry",
    "eventHubNotificationsName": "notifications",
    "eventHubAlertsName": "alerts",
    "dataExplorerConsumerGroupName": "dataexplorer",
    "tsiConsumerGroupName": "timeseriesinsights",
    "logicAppConsumerGroupName": "logicapp",
    "tsiTelemetrySourceName": "telemetryhub",
    "tsiAlertsSourceName": "alertshub"
  },
  "resources": [
    {
      "comments": "OPC Sim VM network security group",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-05-01",
      "name": "[variables('simNetworkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "description": "Locks inbound down to ssh default port 22.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "opcserver0",
            "properties": {
              "description": "Connection to OPC server #0.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "51200",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "opcserver1",
            "properties": {
              "description": "Connection to OPC server #1.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "51201",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 300,
              "direction": "Inbound"
            }
          },
          {
            "name": "opcserver2",
            "properties": {
              "description": "Connection to OPC server #2.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "51202",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 400,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "comments": "OPC Sim VM public IP address",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[variables('simPublicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('simVmDnsName')]"
        }
      },
      "sku": {
        "name": "Basic"
      }
    },
    {
      "comments": "IoT virtual network",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-05-01",
      "name": "[parameters('vNetName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('simNetworkSecurityGroupName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('edgeNetworkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vNetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('simSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters('simSubnetAddressRange')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('simNetworkSecurityGroupName'))]"
              }
            }
          },
          {
            "name": "[parameters('edgeSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters('edgeSubnetAddressRange')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('edgeNetworkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "comments": "OPC Sim network interface",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "[variables('simNetworkInterfaceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('simPublicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('simNetworkSecurityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('simPublicIPAddressName'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('simSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "comments": "OPC Sim virtual machine",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-12-01",
      "name": "[parameters('simVmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('simNetworkInterfaceName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('simVmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('simVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "18.04-LTS",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "fromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('simNetworkInterfaceName'))]"
            }
          ]
        }
      }
    },
    {
      "comments": "One time script execution to configure OPC Sim",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('simVmName'), '/', 'scriptextensions')]",
      "apiVersion": "2019-03-01",
      "location": "[resourceGroup().location]",
      "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
              "fileUris": [
                  "[concat(variables('industrialIoTTemplateUrl'), '/', variables('industrialIoTBranchName'), '/deploy/scripts/simulation.sh')]",
                  "[concat(variables('industrialIoTTemplateUrl'), '/', variables('industrialIoTBranchName'), '/deploy/scripts/', variables('industrialIoTSimulationProfile'), '.yml')]"
              ]
          },
          "protectedSettings": {
              "commandToExecute": "[concat('sudo bash simulation.sh ', ' --admin ', parameters('adminUsername'), ' --name ', variables('industrialIoTSimulationProfile'), ' --imagesNamespace ', concat('\"', parameters('imagesNamespace'), '\"'), ' --imagesTag ', concat('\"', parameters('imagesTag'), '\"'), ' --dockerServer ', concat('\"', parameters('dockerServer'), '\"'), ' --dockerUser ', concat('\"', parameters('dockerUser'), '\"'), ' --dockerPassword ', concat('\"', parameters('dockerPassword'), '\"'))]"
          }
      },
      "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines/', concat(parameters('simVmName')))]"
      ]
    },
    {
      "comments": "IoT edge VM network security group",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-05-01",
      "name": "[variables('edgeNetworkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "description": "Locks inbound down to ssh default port 22.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "comments": "IoT edge VM public IP address",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[variables('edgePublicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('edgeVmDnsName')]"
        }
      },
      "sku": {
        "name": "Basic"
      }
    },
    {
      "comments": "IoT edge VM network interface",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "[variables('edgeNetworkInterfaceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('edgePublicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vNetName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('edgeNetworkSecurityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('edgePublicIPAddressName'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('edgeSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "comments": "IoT edge virtual machine",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-12-01",
      "name": "[parameters('edgeVmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('edgeNetworkInterfaceName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('edgeVmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('edgeVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "microsoft_iot_edge",
            "offer": "iot_edge_vm_ubuntu",
            "sku": "ubuntu_1604_edgeruntimeonly",
            "version": "1.0.1"
          },
          "osDisk": {
            "createOption": "fromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('edgeNetworkInterfaceName'))]"
            }
          ]
        }
      },
      "plan": {
        "name": "ubuntu_1604_edgeruntimeonly",
        "publisher": "microsoft_iot_edge",
        "product": "iot_edge_vm_ubuntu"
      }
    },
    {
      "comments": "One time script to configure and onboard the IoT edge virtual machine",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('edgeVmName'), '/', 'scriptextensions')]",
      "apiVersion": "2019-03-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[concat(variables('industrialIoTTemplateUrl'), '/', variables('industrialIoTBranchName'), '/deploy/scripts/dps-enroll.ps1')]",
            "[concat(variables('industrialIoTTemplateUrl'), '/', variables('industrialIoTBranchName'), '/deploy/scripts/edge-setup.ps1')]",
            "[concat(variables('industrialIoTTemplateUrl'), '/', variables('industrialIoTBranchName'), '/deploy/scripts/edge-setup.sh')]",
            "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/EdgeSolution/modules/OPC/publishednodes.json')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('sudo bash edge-setup.sh --idScope \"', reference(variables('dpsResourceId'), providers('Microsoft.Devices', 'ProvisioningServices').apiVersions[0]).idScope, '\" --dpsConnString \"', 'HostName=', parameters('dpsName'), '.azure-devices-provisioning.net;SharedAccessKeyName=provisioningserviceowner;SharedAccessKey=', listKeys(variables('dpsResourceId'), providers('Microsoft.Devices', 'ProvisioningServices').apiVersions[0]).value[0].primaryKey, '\"', ' && sudo mkdir -p /appdata && sudo mv publishednodes.json /appdata/publishednodes.json')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('edgeVmName'))]",
        "[variables('dpsResourceId')]"
      ]
    },
    {
      "comments": "Datalake storage account",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('datalakeName')]",
      "apiVersion": "2019-04-01",
      "location": "[resourceGroup().location]",
      "kind": "StorageV2",
      "sku": {
        "name": "[parameters('datalakeSku')]"
      },
      "properties": {
        "isHnsEnabled": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [
          ],
          "ipRules": [
          ],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "resources": [
        {
          "type": "blobServices/containers",
          "apiVersion": "2019-06-01",
          "name": "[concat('default/', parameters('datalakeContainerName'))]",
          "dependsOn": [
            "[parameters('datalakeName')]"
          ]
        }
      ],
      "dependsOn": []
    },
    {
      "comments": "Azure IoT Hub",
      "apiVersion": "2020-03-01",
      "type": "Microsoft.Devices/Iothubs",
      "name": "[parameters('iotHubName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[parameters('iotHubSku')]",
        "tier": "[parameters('iotHubTier')]",
        "capacity": "[parameters('iotHubCapacity')]"
      },
      "dependsOn": [
        "[parameters('datalakeName')]"
      ],
      "properties": {
        "location": "[resourceGroup().location]",
        "authorizationPolicies": [
          {
            "keyName": "streamanalytics",
            "rights": "ServiceConnect"
          }
        ],
        "ipFilterRules": [],
        "eventHubEndpoints": {
          "events": {
            "retentionTimeInDays": "[parameters('iotHubRetentionInDays')]",
            "partitionCount": "[parameters('iotHubPartitionCount')]"
          }
        },
        "routing": {
          "endpoints": {
            "serviceBusQueues": [],
            "serviceBusTopics": [],
            "eventHubs": [],
            "storageContainers": [
              {
                "name": "[variables('iotHubStorageEndpointName')]",
                "connectionString": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', environment().suffixes.storage, ';AccountName=', parameters('datalakeName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('datalakeName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]",
                "subscriptionId": "[subscription().subscriptionId]",
                "resourceGroup": "[resourceGroup().name]",
                "containerName": "[parameters('datalakeContainerName')]",
                "fileNameFormat": "{iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}",
                "batchFrequencyInSeconds": 100,
                "maxChunkSizeInBytes": 10485760,
                "encoding": "Json"
              }
            ]
          },
          "routes": [
            {
              "name": "[variables('iotHubStorageEndpointName')]",
              "source": "DeviceMessages",
              "condition": "true",
              "endpointNames": [
                "[variables('iotHubStorageEndpointName')]"
              ],
              "isEnabled": true
            }
          ],
          "fallbackRoute": {
            "name": "$fallback",
            "source": "DeviceMessages",
            "condition": "true",
            "endpointNames": [
              "events"
            ],
            "isEnabled": true
          }
        },
        "storageEndpoints": {
          "$default": {
            "sasTtlAsIso8601": "PT1H",
            "connectionString": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', environment().suffixes.storage, ';AccountName=', parameters('datalakeName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('datalakeName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]",
            "containerName": "[parameters('datalakeContainerName')]"
          }
        },
        "messagingEndpoints": {
          "fileNotifications": {
            "lockDurationAsIso8601": "PT1M",
            "ttlAsIso8601": "PT1H",
            "maxDeliveryCount": 10
          }
        },
        "enableFileUploadNotifications": true,
        "cloudToDevice": {
          "maxDeliveryCount": 10,
          "defaultTtlAsIso8601": "PT1H",
          "feedback": {
            "lockDurationAsIso8601": "PT1M",
            "ttlAsIso8601": "PT1H",
            "maxDeliveryCount": 10
          }
        },
        "features": "None"
      }
    },
    {
      "type": "Microsoft.Devices/iotHubs/eventhubEndpoints/ConsumerGroups",
      "apiVersion": "2020-03-01",
      "name": "[concat(parameters('iotHubName'), '/events/', variables('asaConsumerGroupName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', parameters('iotHubName'))]"
      ]
    },
    {
      "comments": "Azure Device Provisioning service.",
      "type": "Microsoft.Devices/provisioningServices",
      "name": "[parameters('dpsName')]",
      "apiVersion": "2018-01-22",
      "location": "[resourceGroup().location]",
      "sku": {
          "name": "[parameters('dpsSku')]",
          "capacity": "[parameters('dpsCapacity')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]"
      ],
      "properties": {
        "iotHubs": [
          {
            "connectionString": "[concat('HostName=', reference(resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))).hostName, ';SharedAccessKeyName=iothubowner', ';SharedAccessKey=', listKeys(resourceId('Microsoft.Devices/IotHubs', parameters('iotHubName')), providers('Microsoft.Devices', 'IoTHubs').apiVersions[0]).value[0].primaryKey)]",
            "location": "[parameters('dpsLocation')]",
            "name": "[concat(parameters('iotHubName'),'.azure-devices.net')]"
          }
        ]
      }
    },
    {
      "comments": "Azure Event Hub Namespace",
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2017-04-01",
      "name": "[parameters('eventHubNamespaceName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [],
      "sku": {
          "name": "[parameters('eventHubSkuTier')]",
          "tier": "[parameters('eventHubSkuTier')]",
          "capacity": "[parameters('eventHubSkuCapacity')]"
      },
      "properties": {
          "isAutoInflateEnabled": "[parameters('eventHubAutoInflate')]",
          "maximumThroughputUnits": "[parameters('eventHubMaxThroughput')]"
      }
    },
    {
      "comments": "Azure Event hub authorization rule to listen to events",
      "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('eventHubNamespaceName'), '/', variables('eventHubListenPolicyName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
      ],
      "properties": {
        "rights": [
          "Listen"
        ]
      }
    },
    {
      "comments": "Azure Event hub authorization rule to send events",
      "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('eventHubNamespaceName'), '/', variables('eventHubSendPolicyName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
      ],
      "properties": {
        "rights": [
          "Send"
        ]
      }
    },
    {
      "comments": "Azure Event Hub for processed Device Telemetry",
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "name": "[concat(parameters('eventHubNamespaceName'), '/', variables('eventHubTelemetryName'))]",
      "apiVersion": "2017-04-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
      ],
      "properties": {
        "messageRetentionInDays": "[parameters('eventHubRetentionInDays')]",
        "partitionCount": "[parameters('eventHubPartitionCount')]",
        "status": "Active"
      }
    },
    {
      "comments": "Consumer group for telemetry data for Azure Data Explorer",
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('eventHubNamespaceName'), '/', variables('eventHubTelemetryName'), '/', variables('dataExplorerConsumerGroupName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), variables('eventHubTelemetryName'))]"
      ],
      "properties": {}
    },
    {
      "comments": "Consumer group for telemetry data for Time Series Insights",
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('eventHubNamespaceName'), '/', variables('eventHubTelemetryName'), '/', variables('tsiConsumerGroupName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), variables('eventHubTelemetryName'))]"
      ],
      "properties": {}
    },
    {
      "comments": "Azure Event Hub for processed notifications",
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "name": "[concat(parameters('eventHubNamespaceName'), '/', variables('eventHubNotificationsName'))]",
      "apiVersion": "2017-04-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
      ],
      "properties": {
        "messageRetentionInDays": "[parameters('eventHubRetentionInDays')]",
        "partitionCount": "[parameters('eventHubPartitionCount')]",
        "status": "Active"
      }
    },
    {
      "comments": "Consumer group for notifications logic app",
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('eventHubNamespaceName'), '/', variables('eventHubNotificationsName'), '/', variables('logicAppConsumerGroupName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), variables('eventHubNotificationsName'))]"
      ],
      "properties": {}
    },
    {
      "comments": "Azure Event Hub for processed alerts",
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "name": "[concat(parameters('eventHubNamespaceName'), '/', variables('eventHubAlertsName'))]",
      "apiVersion": "2017-04-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
      ],
      "properties": {
        "messageRetentionInDays": "[parameters('eventHubRetentionInDays')]",
        "partitionCount": "[parameters('eventHubPartitionCount')]",
        "status": "Active"
      }
    },
    {
      "comments": "Consumer group for alerting logic app",
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('eventHubNamespaceName'), '/', variables('eventHubAlertsName'), '/', variables('logicAppConsumerGroupName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), variables('eventHubAlertsName'))]"
      ],
      "properties": {}
    },
    {
      "comments": "Consumer group for Time Series Insights",
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2017-04-01",
      "name": "[concat(parameters('eventHubNamespaceName'), '/', variables('eventHubAlertsName'), '/', variables('tsiConsumerGroupName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), variables('eventHubAlertsName'))]"
      ],
      "properties": {}
    },
    {
      "comments": "Time Series Insights storage account",
      "apiVersion": "2018-02-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('tsiStorageAccountName')]",
      "kind": "[parameters('tsiStorageAccountKind')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('tsiStorageAccountType')]"
      },
      "properties": {
        "isHnsEnabled": "[parameters('tsiStorageisHnsEnabled')]"
      }
    },
    {
      "comments": "Time Series Insights environment",
      "apiVersion": "2020-05-15",
      "type": "Microsoft.TimeSeriesInsights/environments",
      "name": "[parameters('tsiEnvironmentName')]",
      "kind": "[parameters('tsiEnvironmentKind')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('tsiEnvironmentSkuName')]",
        "capacity": "[parameters('tsiEnvironmentSkuCapacity')]"
      },
      "properties": {
        "storageConfiguration": {
          "accountName": "[parameters('tsiStorageAccountName')]",
          "managementKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('tsiStorageAccountName')), '2018-02-01').keys[0].value]"
        },
        "timeSeriesIdProperties": "[parameters('tsiEnvironmentTimeSeriesIdProperties')]",
        "warmStoreConfiguration": {
          "dataRetention": "[parameters('tsiWarmStoreDataRetention')]"
        }
      },
      "resources": [
        {
          "apiVersion": "2020-05-15",
          "type": "Microsoft.TimeSeriesInsights/environments/accesspolicies",
          "name": "[concat(parameters('tsiEnvironmentName'), '/', 'ownerAccessPolicyName')]",
          "condition": "[not(empty(parameters('tsiAccessPolicyObjectId')))]",
          "properties": {
            "principalObjectId": "[parameters('tsiAccessPolicyObjectId')]",
            "roles": "[parameters('tsiAccessPolicyRoles')]"
          },
          "dependsOn": [
            "[concat('Microsoft.TimeSeriesInsights/environments/', parameters('tsiEnvironmentName'))]"
          ]
        },
        {
          "apiVersion": "2020-05-15",
          "type": "eventsources",
          "kind": "Microsoft.EventHub",
          "name": "[variables('tsiTelemetrySourceName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.TimeSeriesInsights/environments/', parameters('tsiEnvironmentName'))]"
          ],
          "properties": {
            "eventSourceResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), variables('eventHubTelemetryName'))]",
            "serviceBusNamespace": "[parameters('eventHubNamespaceName')]",
            "eventHubName": "[variables('eventHubTelemetryName')]",
            "keyName": "[variables('eventHubListenPolicyName')]",
            "consumerGroupName": "[variables('tsiConsumerGroupName')]",
            "sharedAccessKey": "[listKeys(variables('eventHubListenRuleId'), providers('Microsoft.EventHub', 'namespaces/authorizationRules').apiVersions[0]).primaryKey]",
            "timestampPropertyName": "[parameters('tsiTimestampPropertyName')]"
          }
        },
        {
          "apiVersion": "2020-05-15",
          "type": "eventsources",
          "kind": "Microsoft.EventHub",
          "name": "[variables('tsiAlertsSourceName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.TimeSeriesInsights/environments/', parameters('tsiEnvironmentName'))]"
          ],
          "properties": {
            "eventSourceResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), variables('eventHubAlertsName'))]",
            "serviceBusNamespace": "[parameters('eventHubNamespaceName')]",
            "eventHubName": "[variables('eventHubAlertsName')]",
            "keyName": "[variables('eventHubListenPolicyName')]",
            "consumerGroupName": "[variables('tsiConsumerGroupName')]",
            "sharedAccessKey": "[listKeys(variables('eventHubListenRuleId'), providers('Microsoft.EventHub', 'namespaces/authorizationRules').apiVersions[0]).primaryKey]",
            "timestampPropertyName": "[parameters('tsiTimestampPropertyName')]"
          }
        }
      ],
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('tsiStorageAccountName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), variables('eventHubTelemetryName'))]"
      ]
    }
  ],
  "outputs": {
    "dpsIdScope": {
      "type": "string",
      "value": "[reference(variables('dpsResourceId'), providers('Microsoft.Devices', 'ProvisioningServices').apiVersions[0]).idScope]"
    },
    "dpsConnString": {
      "type": "string",
      "value": "[concat('HostName=', parameters('dpsName'), '.azure-devices-provisioning.net;SharedAccessKeyName=provisioningserviceowner;SharedAccessKey=', listKeys(variables('dpsResourceId'), providers('Microsoft.Devices', 'ProvisioningServices').apiVersions[0]).value[0].primaryKey)]"
    },
    "eventHubSendKey": {
      "type": "string",
      "value": "[listKeys(variables('eventHubSendRuleId'), providers('Microsoft.EventHub', 'namespaces/authorizationRules').apiVersions[0]).primaryKey]"
    },
    "eventHubListenKey": {
      "type": "string",
      "value": "[listKeys(variables('eventHubListenRuleId'), providers('Microsoft.EventHub', 'namespaces/authorizationRules').apiVersions[0]).primaryKey]"
    },
    "tsiDataAccessFQDN": {
      "value": "[reference(resourceId('Microsoft.TimeSeriesInsights/environments', parameters('tsiEnvironmentName'))).dataAccessFQDN]",
      "type": "string"
    }
  }
}